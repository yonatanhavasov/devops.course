name: CI/CD with Helm CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  IMAGE_NAME: yonihavasov/flask-app
  IMAGE_TAG: 0.0.${{ github.run_number }}

jobs:
  build-Test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Images
        run: |
          docker build -t ${IMAGE_NAME}:${IMAGE_TAG} -t ${IMAGE_NAME}:latest flask-app
          docker push ${IMAGE_NAME}:${IMAGE_TAG}
          docker push ${IMAGE_NAME}:latest

      - name: Set up Docker Compose
        run: |
          curl -L "https://github.com/docker/compose/releases/download/v2.21.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          docker-compose version
    
      - name: Create .env file
        run: |
         echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> flask-app/.env
         echo "MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}" >> flask-app/.env
         echo "MYSQL_USER=${{ secrets.MYSQL_USER }}" >> flask-app/.env
         echo "MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}" >> flask-app/.env
         echo "PORT=${{ secrets.PORT }}" >> flask-app/.env
         echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> flask-app/.env
         echo "DB_NAME=${{ secrets.DB_NAME }}" >> flask-app/.env
         echo "DB_HOST=${{ secrets.DB_HOST }}" >> flask-app/.env
         echo "DB_USER=${{ secrets.DB_USER }}" >> flask-app/.env      
    
      - name: Start the application with Docker Compose
        working-directory: flask-app
        run: | 
            docker-compose --env-file .env -f docker-compose.yml up -d
            sleep 10 # Allow time for the application to start

      - name: Test the application with curl
        run: |
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:5001)
          if [ "$RESPONSE" -ne 200 ]; then
            echo "Test failed with HTTP status $RESPONSE"
            exit 1
          fi
          echo "Test passed with HTTP status $RESPONSE"            
            
  helm-ci:
    runs-on: ubuntu-latest
    needs: build-Test  # Runs after build
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    steps:
            - name: Checkout Code
              uses: actions/checkout@v3

            - name: Install Helm
              run: |
                curl -fsSL https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
                helm version

            - name: Update Helm Chart Version
              run: |
                cd flask-app/charts/helm
                sed -i "s/version: .*/version: 1.0.${{ github.run_number }}/g" ./Chart.yaml
                echo "# this file was modified by a ci to update helm version tagging" >> ./Chart.yaml

            - name: Package Helm Chart
              run: |
                cd flask-app/charts
                helm package helm --destination ..
                cd ..
                ls -lrta

            - name: Update Helm Repo Index # searches for tar.gz file in same dir.
              run: |
                cd flask-app
                helm repo index --url https://yonatanhavasov.github.io/helm-flaskgif .
                ls -lrta

            - name: Push helm chart ( tgz and index.yaml ) to helm repo
              env:
                HELM_REPO_PAT: ${{ secrets.HELM_REPO_PAT }} 
              run: |
                set -x
                cd flask-app
                git clone https://${HELM_REPO_PAT}@github.com/yonatanhavasov/helm-flaskgif.git helmrepo
                cd helmrepo
                pwd
                sleep 3
                git config --global user.name "github-actions-app"
                git config --global user.email "github-actions@gmail.com"
                ls -lrta

                rm -f *.tgz && rm -f index.yaml
                cp ../*.tgz .
                cp ../index.yaml .
                ls -lrta

                git add .
                git commit -m "Updated helm chart version from APP REPO TRIGGER - Version 1.0.${{ github.run_number }}"
                git push origin main
                sleep 5

                echo "pushed updated helm chart to helm-repo"

      
  deploy:
    runs-on: ubuntu-latest
    needs: helm-ci
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: setup Terraform
        uses: hashicorp/setup-terraform@v2
        with: 
          terraform_wrapper: false  

      - name: Setup Google Cloud Service Account Key
        run: |
          echo '${{ secrets.GOOGLE_CREDENTIALS }}' > /tmp/key.json
          echo "GOOGLE_APPLICATION_CREDENTIALS=/tmp/key.json" >> $GITHUB_ENV

      - name: Install gcloud CLI # for cli commands
        uses: google-github-actions/setup-gcloud@v1
  
      - name: login to gcloud # using service account as a credential to login to gcloud cli.
        run: |
          gcloud auth activate-service-account --key-file=/tmp/key.json

      - name: verify gcloud login # debug.
        run: |
          set -x
          gcloud auth list
            
      - name: Terraform Init
        run: |
          cd flask-app/terraform-gke-k8s
          terraform init
  
      - name: Terraform Apply # update cluster infrastructure.
        run: |
          cd flask-app/terraform-gke-k8s
          terraform apply -auto-approve
  
      - name: Install Helm
        run: |
          curl -fsSL https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
          helm version
  
      - name: Add and Update Helm Repository
        run: |
          helm repo add flaskrepo https://yonatanhavasov.github.io/helm-flaskgif
          helm repo update
          helm search repo flaskrepo --versions
  
      - name: install GKE google plugin # a must install google plugin to connect to gke cluster
        run: |
          gcloud components install gke-gcloud-auth-plugin
  
      - name: List GKE Clusters # debug.
        run: |
          gcloud container clusters list --project ${{ secrets.GCP_PROJECT_ID }}    

      - name: Authenticate with GKE
        run: |
          gcloud auth activate-service-account --key-file=/tmp/key.json
          gcloud container clusters get-credentials \
            ${{ secrets.GCP_CLUSTER_NAME }} \
            --project ${{ secrets.GCP_PROJECT_ID }} \
            --region  ${{secrets.GCP_REGION}}

      - name: Deploy Flask App Using Helm, Updating Release and App-Image (--set flag)
        run: |
          set -ex
          echo "IMAGE_TAG=${IMAGE_TAG}"
          helm upgrade --install release flaskrepo/flask-app \
            --namespace default \
            --set flaskApp.tag=${IMAGE_TAG}
          helm list

          
      - name: Restart Kubernetes Deployment
        run: |
          kubectl rollout restart deployment flask-app-deployment  

      - name: Debug Kubernetes Pods
        run: |
          kubectl get pods -A
          kubectl describe pods -n default
