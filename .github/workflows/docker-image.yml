name: Docker Image CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build_and_push:
    runs-on: ubuntu-latest

    steps:
    - name: Check out the repository
      uses: actions/checkout@v4

    - name: Set up Docker
      uses: docker/setup-buildx-action@v2

    - name: Install Docker Compose
      run: |
        curl -L "https://github.com/docker/compose/releases/download/v2.21.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        chmod +x /usr/local/bin/docker-compose
        docker-compose version

    - name: Start the application with Docker Compose
      env:
        MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
        MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
        MYSQL_USER: ${{ secrets.MYSQL_USER }}
        MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
        PORT: ${{ secrets.PORT }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        DB_NAME: ${{ secrets.DB_NAME }}
        DB_HOST: ${{ secrets.DB_HOST }}
        DB_USER: ${{ secrets.DB_USER }}
      run: |
        docker-compose -f flask-app/docker-compose.yml up -d


    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with: 
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and Push the Docker image
      run: |
        docker build -t yonihavasov/flask:latest flask-app
        docker push yonihavasov/flask:latest

  test:
    runs-on: ubuntu-latest
    needs: build_and_push

    steps:
    - name: Check out the repository
      uses: actions/checkout@v4

    - name: Set up Docker Compose
      run: |
        curl -L "https://github.com/docker/compose/releases/download/v2.21.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        chmod +x /usr/local/bin/docker-compose
        docker-compose version

    - name: Start the application with Docker Compose
      run: |
        docker-compose -f flask-app/docker-compose.yml up -d
        sleep 5 # Allow time for the application to start

    - name: Test the application with curl
      run: |
        RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:5001)
        if [ "$RESPONSE" -ne 200 ]; then
          echo "Test failed with HTTP status $RESPONSE"
          exit 1
        fi
        echo "Test passed with HTTP status $RESPONSE"

    - name: Clean up Docker Compose
      if: always()
      run: docker-compose -f flask-app/docker-compose.yml down
